var documenterSearchIndex = {"docs":
[{"location":"guide/#How-to-Guide-1","page":"How-to Guide","title":"How-to Guide","text":"","category":"section"},{"location":"guide/#Loading-file-data-1","page":"How-to Guide","title":"Loading file data","text":"","category":"section"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"Raw data:","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"load_twix — load Siemens raw scanner \"meas_*.dat\" \"twix\" format, as produced by the twix exporter program available at clinical sites with a Siemens IDEA licence.\nmr_load — load raw scanner data and recognize the sequence, wrapping in sequence-specific metadata.","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"Spectroscopy:","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"load_rda, save_rda — simple support for the Siemens \".rda\" processed spectroscopy format.\nsave_nmrpipe — save spectroscopy data to NMRPipe format. We have found this helpful for importing into mestrelab's MNova NMR processing software.\nsave_felix — save spectroscopy data to Felix NMR \".dat\" format.","category":"page"},{"location":"guide/#Converting-Siemens-raw-data-to-Felix-format-1","page":"How-to Guide","title":"Converting Siemens raw data to Felix format","text":"","category":"section"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"TODO","category":"page"},{"location":"guide/#Processing-2D-L-COSY-spectroscopy-1","page":"How-to Guide","title":"Processing 2D L-COSY spectroscopy","text":"","category":"section"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"Here's an example of how you can load L-COSY data from Siemens TWIX format, convert it into a spectrum and view that spectrum:","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"using MagneticResonanceSignals, AxisArrays, Unitful\n\ncosy = mr_load(\"meas_MID00417_FID85233_svs_lcosy.dat\")\n\n# High level interface: this does the whole spectral conversion for you using\n# simple averaging.  You can set the windows here if you like.\nspec = spectrum(cosy)\n\n# Plot the absolute value of the spectrum\nusing Plots\npyplot()\ngetaxis(s, n) = ustrip.(uconvert.(u\"Hz\", AxisArrays.axes(s, Axis{n}).val))\nf1 = getaxis(spec, :freq1)\nf2 = getaxis(spec, :freq2)\ncontour(f2, reverse(f1), Matrix(transpose(log.(abs.(spec)))); levels=-10:0.3:-3,\n        seriescolor=cgrad(felix_colors), clims=(-10,-3),\n        background_color=:black, aspectratio=1.0,\n        xlabel=\"F2 (Hz)\", ylabel=\"F1 (Hz)\",\n        xticks=-1000:100:1000, yticks=-1000:100:1000,\n        xlim=[-200,550], ylim=[-200,550])","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"Here's an example of how you can convert to Felix format:","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"using MagneticResonanceSignals, AxisArrays\n\ncosy = mr_load(\"meas_MID00417_FID85233_svs_lcosy.dat\")\nsignal = simple_averaging(cosy, downsample=2)\n\n# Extract some metadata required by the felix format\nfrequency = standard_metadata(cosy).frequency\nf1_bandwidth = 1.0/step(AxisArrays.axes(signal, Axis{:time1}).val)\nf2_bandwidth = 1.0/step(AxisArrays.axes(signal, Axis{:time2}).val)\n\nsave_felix(\"felix_input.dat\", signal; bandwidth=(f2_bandwidth, f1_bandwidth), frequency=frequency)","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"Here's an example of how to do the steps in spectrum(cosy), with the averaging and windowing written out explicitly.","category":"page"},{"location":"guide/#","page":"How-to Guide","title":"How-to Guide","text":"signal = simple_averaging(cosy)\n\n# Apply sine bell squared windows to signal, as in TRI Felix workflow\napply_window!(signal, Axis{:time2}, t->sinebell(t, pow=2, skew=0.3))\napply_window!(signal, Axis{:time1}, t->sinebell(t, pow=2))\n\n# Add zero padding here\nsignal = zeropad(signal, Axis{:time1}, 4)\n\n# Compute spectrum from time domain signal\nspec = spectrum(signal)","category":"page"},{"location":"reference/#API-Reference-1","page":"Reference","title":"API Reference","text":"","category":"section"},{"location":"reference/#MR-data-types-1","page":"Reference","title":"MR data types","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"MRExperiment\nMagneticResonanceSignals.PRESS\nMagneticResonanceSignals.LCOSY","category":"page"},{"location":"reference/#MagneticResonanceSignals.MRExperiment","page":"Reference","title":"MagneticResonanceSignals.MRExperiment","text":"load_twix(twix_file_name)\nload_twix(io)\n\nMRExperiment(metadata, coils, quality_control, acq_data)\n\nContainer for data from a generic magnetic resonance experiment: a series of Acquisitions, each of which records the coil response due to induced nuclear magnetization. This is currently specialized for the type of raw data produced by a Siemens scanner but could be generalized.\n\nNote that the input pulse sequence is not recorded in Siemens raw format, so it's not available here. The only way to know this in full detail is to simulate the sequence with the same input parameters using the Siemens poet tool from the Siemens proprietary IDEA development environment.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagneticResonanceSignals.PRESS","page":"Reference","title":"MagneticResonanceSignals.PRESS","text":"A standard Point Resolved Spectroscopy (PRESS) experiment with num_averages acquisitions, possibly with navigator and reference scans included.\n\nThis is implemented as \"single voxel spectroscopy\" and is the standard product sequence for in vivo MR spectroscopy on Siemens scanners as of early 2020.\n\n\n\n\n\n","category":"type"},{"location":"reference/#MagneticResonanceSignals.LCOSY","page":"Reference","title":"MagneticResonanceSignals.LCOSY","text":"An L-COSY experiment with (num_averages × nsamp_t1) acquisitions, possibly with reference scans included.\n\nThe L-COSY pulse sequence is described in:\n\nThomas, M. Albert, et al. \"Localized two‐dimensional shift correlated MR spectroscopy of human brain.\" Magnetic Resonance in Medicine 46.1 (2001): 58-67.\nThomas, M. Albert, et al. \"Evaluation of two‐dimensional L‐COSY and JPRESS using a 3 T MRI scanner: from phantoms to human brain in vivo.\" NMR in Biomedicine 16.5 (2003): 245-251.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Querying-MR-data-1","page":"Reference","title":"Querying MR data","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"meta_search\nstandard_metadata\nscanner_time\nsampledata\ncount_cycles","category":"page"},{"location":"reference/#MagneticResonanceSignals.meta_search","page":"Reference","title":"MagneticResonanceSignals.meta_search","text":"meta_search(metadata, pattern)\n\nSearch through MR experiment metadata for a given regular expression, pattern or for a case insensitive string pattern.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.standard_metadata","page":"Reference","title":"MagneticResonanceSignals.standard_metadata","text":"Extract standard MR metadata about an experiment\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.scanner_time","page":"Reference","title":"MagneticResonanceSignals.scanner_time","text":"scanner_time(acq | expt)\n\nGet internal scanner time stamp from an acquisition or sequence of timestamps from an experiment.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.sampledata","page":"Reference","title":"MagneticResonanceSignals.sampledata","text":"sampledata(expt, index; downsample=1)\n\nReturn the acquired data from expt at a given acqusition index.  If downsample>1, the data will be subsampled by the given rate by truncating the tails of the signal in the Fourier spectral domain. This has the effect of removing noise by filtering away irrelevant high and low frequency components.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.count_cycles","page":"Reference","title":"MagneticResonanceSignals.count_cycles","text":"count_cycles(twix::MRExperiment)\n\nGet phase cycle length for Siemens twix.\n\n\n\n\n\n","category":"function"},{"location":"reference/#High-level-file-IO-and-conversion-1","page":"Reference","title":"High level file IO and conversion","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"mr_load\ntwix_to_nmrpipe","category":"page"},{"location":"reference/#MagneticResonanceSignals.mr_load","page":"Reference","title":"MagneticResonanceSignals.mr_load","text":"mr_load(data)\n\nHigh level function for loading MR data and recognizing which experiment was run. The returned object describes the experimental conditions and acquisition schedule which can be used during data processing.  data may be a file name, IO stream, or a data structure describing raw acquisition data, for example, Siemens Twix.\n\nIf the experiment is not recognized, throw an exception.\n\n\n\n\n\nmr_load(twix::MRExperiment, repair=false)\n\nIf repair=true, attempt to repair the experiment by discarding a subset of broken acquisitions where possible.\n\nRecognizes spectro experiments in Siemens twix format, producing one of:\n\nPRESS (Siemens product sequence SVS_SE)\nLCOSY (Customer sequencese srcosy,svs_lcosy)\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.twix_to_nmrpipe","page":"Reference","title":"MagneticResonanceSignals.twix_to_nmrpipe","text":"twix_to_nmrpipe(twix, nmrpipe_path)\n\ntwix is a path or open IO stream to the original twix data file. nmrpipe is a path or open IO stream to the result file to be written.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Low-level-file-IO-1","page":"Reference","title":"Low level file IO","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"load_rda\nsave_rda\nload_twix\nsave_felix\nsave_nmrpipe","category":"page"},{"location":"reference/#MagneticResonanceSignals.load_rda","page":"Reference","title":"MagneticResonanceSignals.load_rda","text":"load_rda(rda_file)\n\nLoad header dictionary and spectroscopy data from a Siemens .rda file.  Returns header,data, where header is a simple dictionary containing the ASCII header, and data is the time domain induced magnetization signal.\n\nSingle voxel spectroscopy data will be loaded as a vector containing the single magnentization signal.\n\nFor spectroscopy with a spatial component (that is, CSI data with at least one header field CSIMatrixSize[i] not equal to 1), an array of size N×I×K×J will be returned where I,J,K are the CSI indices 0,1,2 and the FID length is N.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.save_rda","page":"Reference","title":"MagneticResonanceSignals.save_rda","text":"save_rda(file, header, data)\n\nSave a single FID as Siemens format .rda.  header should be a dictionary of key values for the rda ASCII header.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.load_twix","page":"Reference","title":"MagneticResonanceSignals.load_twix","text":"load_twix(filename; header_only=false, acquisition_filter=(acq)->true,\n          meas_selector=last)\n\nLoad raw Siemens twix \".dat\" format, producing an MRExperiment containing a sequence of acqisitions.\n\nFor large files, acquisitions may be filtered out during file loading by providing a predicate acquisition_filter(acq) which returns true when acq should be kept.  By default, all acquisitions are retained.\n\nN4 VD-version twix may have data from more than one sequence (for example, the tune-up data may be included). Normally the data you're looking for is in the meas_selector=last chunk, but meas_selector is provided for the cases where you want to select other measurements.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.save_felix","page":"Reference","title":"MagneticResonanceSignals.save_felix","text":"save_felix(fname, data; bandwidth, frequency)\n\nCreate Felix NMR file for 2D NMR experiment with 2D data matrix size npoints = size(data), spectral width bandwidth = (t2_bw, t1_bw) and given spectrometer frequency, which should be unit-compatible with Hz.\n\ndata[i,:] is assumed to contain the real time FIDs as acquired in the standard 2D COSY experiment (ie, the \"t2\" dimension).\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.save_nmrpipe","page":"Reference","title":"MagneticResonanceSignals.save_nmrpipe","text":"save_nmrpipe(io, signal, axes; frequency, ref_freq_offset)\n\nConvert twix into NMR Pipe format to be loaded into third party analytical software, such as MNova. This currently supports up to 2 dimension.\n\nAt minimal, for each dimension we should have:\n\nSignal data\nAxes\nObservation frequency (frequency)\nCarrier frequency (ref_freq_offset)\n\nref_freq_offset is a tuple containing the relative frequency offset between obs_freq and frequency which will be set to 0 on the ppm scale.\n\n\n\n\n\n","category":"function"},{"location":"reference/#High-level-signal-processing-1","page":"Reference","title":"High level signal processing","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"extract_fids\nsimple_averaging\nspectrum","category":"page"},{"location":"reference/#MagneticResonanceSignals.extract_fids","page":"Reference","title":"MagneticResonanceSignals.extract_fids","text":"extract_fids(lcosy::LCOSY; downsample=1)\n\nExtract raw fid from LCOSY experiment and apply channel combination\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.simple_averaging","page":"Reference","title":"MagneticResonanceSignals.simple_averaging","text":"simple_averaging(spectro_expt)\n\nSimple channel combination and averaging for spectroscopic data acquisition.\n\nNote that this uses a simple mean to combine acquisitions across the phase cycling dimension; it does no frequency alignment or other calibration.\n\n\n\n\n\nsimple_averaging(fids)\n\nDo simple averaging from FIDs\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.spectrum","page":"Reference","title":"MagneticResonanceSignals.spectrum","text":"spectrum(lcosy::LCOSY,\n         win1=t->sinebell(t, pow=2),\n         win2=t->sinebell(t, skew=0.3, pow=2),\n         t1pad=4)\n\nCompute spectrum from lcosy data with \"standard\" L-COSY processing parameters as have traditionally been used by Mountford et. al.\n\nSimple averaging\nT2: skewed sine bell squared window, skew=0.3\nT1: Sine bell squared window, 4x zero padded\n\n\n\n\n\nspectrum(signal::AxisArray)\n\nCompute the spectrum from time domain signal via Fourier Transform.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Low-level-signal-processing-1","page":"Reference","title":"Low level signal processing","text":"","category":"section"},{"location":"reference/#Channel-combination-1","page":"Reference","title":"Channel combination","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"pca_channel_combiner\ncombine_channels","category":"page"},{"location":"reference/#MagneticResonanceSignals.pca_channel_combiner","page":"Reference","title":"MagneticResonanceSignals.pca_channel_combiner","text":"pca_channel_combiner(signals; signal_range=nothing, channels=:)\n\nCompute channel combination object using PCA, assuming that each acquisition in signals has the same relative geometry of sample and coils.  signals[i] is assumed to be an array of shape num_samp × num_chan.  We use the first few samples of all acquisition data together in the same calculation to get a good estimate of the correct channel weights.\n\nThese assumptions should be valid to assess the relative coil SNR for spectroscopy of a single voxel; for other experiments you may want to use a different method, or restrict calculation of weights to a different signal_range.\n\nchannels can be set to a index-like object in order to combine only a subset of channels.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.combine_channels","page":"Reference","title":"MagneticResonanceSignals.combine_channels","text":"combine_channels(combiner::ChannelCombiner, data)\n\nCombine channels data residing in a NxC matrix data, where N is number of temporal samples and C the number of channels.  Alternatively, data can be an acquisition.\n\nSee pca_channel_combiner() to create a ChannelCombiner functor.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Windows-and-windowing-1","page":"Reference","title":"Windows and windowing","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"zeropad\napply_window\napply_window!\nsinebell","category":"page"},{"location":"reference/#MagneticResonanceSignals.zeropad","page":"Reference","title":"MagneticResonanceSignals.zeropad","text":"zeropad(fid, axis, pad)\n\nZero pad an FID for Fourier interpolation\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.apply_window","page":"Reference","title":"MagneticResonanceSignals.apply_window","text":"apply_window(signal, axis1=>win1, axis2=>win2, ...)\n\nApply window functions win1 along axis1, win2 along axis2, etc.  The windows should be functions over the dimensionless time domain 0..1; the axes should be of type AxisArrays.Axis.\n\nBackground\n\nFor the purposes of spectroscopy, the MR signal is generally an oscillating decaying signal in the time domain, with different metabolites having different decay constants. When computing a spectrum with a simple Fourier transform, one may window the time domain data to emphasize one metabolite or another in the resulting spectrum. (Spatially resolved spectroscopy involves some kind of MR echo so the initial part of the signal may be increasing, but the this doesn't affect the irreversible decay mechanisms.)\n\nFor qualitative exploration of the spectra, one may therefore want to choose out of several windowing functions with convenient parametric forms. Note that for quantitative measurement of metabolite concentration, windowing distorts the relative peak volumes and it's probably better to choose a time domain fitting method.\n\nNote that these MR-specific reasons are subtly different - and apply in addition to - the generic signal processing reasons for time domain windowing.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.apply_window!","page":"Reference","title":"MagneticResonanceSignals.apply_window!","text":"Apply windowfunc over the dimensionless time range (0:tlen-1)/tlen) of fid along dimension axis which can be an Axis or Integer.\n\nSee also apply_window.\n\n\n\n\n\n","category":"function"},{"location":"reference/#MagneticResonanceSignals.sinebell","page":"Reference","title":"MagneticResonanceSignals.sinebell","text":"sinebell(t; skew=1, pow=1)\n\nThe sinebell window on the dimensionless time range t ∈ 0..1.\n\nUse pow=2 for sinebell squared. Setting the skew parameter to something other than the default of 1.0 gives a skewed sinebell window, as in Felix NMR.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Plotting-1","page":"Reference","title":"Plotting","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"felix_colors","category":"page"},{"location":"reference/#MagneticResonanceSignals.felix_colors","page":"Reference","title":"MagneticResonanceSignals.felix_colors","text":"A popular color map for multidimensional NMR data as defined in Felix NMR\n\n\n\n\n\n","category":"constant"},{"location":"#MagneticResonanceSignals.jl-1","page":"Overview","title":"MagneticResonanceSignals.jl","text":"","category":"section"},{"location":"#","page":"Overview","title":"Overview","text":"This library was developed with the intent to flexibly process data from unusual and bespoke magnetic resonance (MR) sequences.  Similar to the python library suspect, the focus has been on spectroscopy, so the higher level functionality is specific to spectroscopy.","category":"page"},{"location":"#","page":"Overview","title":"Overview","text":"However, rather than being limited to spectroscopy, this library tries to provide rich and general access to the raw data in a way which reflects an arbitrary MR experiment. In particular, it provides a reader for the raw Siemens \"twix\" format and some nascent facilities to abstract over that format with the capabilities and limitations of the physical experiment in mind.","category":"page"},{"location":"#","page":"Overview","title":"Overview","text":"In a way, this makes the library partly comparable to the much larger project ISMRMRD and we should arguably have a reader for ISMRMRD format here. However, ISMRMRD is an extra layer of conversion away from the raw data and is somewhat imaging-focused (this is both good and bad).","category":"page"},{"location":"#Installation-1","page":"Overview","title":"Installation","text":"","category":"section"},{"location":"#","page":"Overview","title":"Overview","text":"To install, issue the following command from Julia's package prompt.","category":"page"},{"location":"#","page":"Overview","title":"Overview","text":"pkg> add https://github.com/TRIImaging/MagneticResonanceSignals.jl","category":"page"},{"location":"#Table-of-Contents-1","page":"Overview","title":"Table of Contents","text":"","category":"section"},{"location":"#","page":"Overview","title":"Overview","text":"Pages = [\"guide.md\", \"reference.md\"]","category":"page"}]
}
